# -*- coding: utf-8 -*-
"""sample two step.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kb3YYxoqzDPbUjviKDJyamzO8MGUshsS
"""

# Install packages if not already installed
# pip install access pandas geopandas matplotlib

# Import libraries
#import logging
import os
from icecream import ic
import pandas as pd
import geopandas as gpd
#import matplotlib.pyplot as plt
from access import Access, weights, Datasets
import warnings

# access package will have some issues with Python3 but not a problem now
warnings.filterwarnings("ignore", category=FutureWarning)

ic.disable() # disable print statements
#ic.enable()

# Input data paths
root_dir         = os.path.dirname(os.path.dirname(__file__))  # goes up from code/
hosp_data_path   = os.path.join(root_dir, "input_data", "sample_heb_input_data", "hospitals_data.geojson")
pop_data_path    = os.path.join(root_dir, "input_data", "sample_heb_input_data", "population_data.geojson")
travel_data_path = os.path.join(root_dir, "input_data", "sample_heb_input_data", "travel_times_data.csv")

# read in input data
hospitals_df    = gpd.read_file(hosp_data_path)  # Geospatial data for hospitals
population_df   = gpd.read_file(pop_data_path)  # Geospatial data for population per area
travel_times_df = pd.read_csv(travel_data_path)  # Cost matrix

ic(population_df.head())
ic(hospitals_df.head())
ic(travel_times_df.head())

# Create output data path and make folder if it doesn't exist
output_dir = "../produced_data/sample_heb_access_output"
os.makedirs(output_dir, exist_ok=True)

# Define accessibility model with all the model inputs
A = Access(
    # Demand from the population (pop size of a location, like ZIP code)
    demand_df=population_df,
    demand_index="geoid",
    demand_value="population",
    # Supply from the hospitals (staffed beds)
    supply_df=hospitals_df,
    supply_index="geoid",
    supply_value="hospital_count",
    # Cost to get from population to hospital, in minutes driving
    cost_df=travel_times_df,
    cost_origin="origin",
    cost_dest="dest",
    cost_name="cost",
    #figure out how to do this or what the importance of neighbor is!
    neighbor_cost_df=travel_times_df,
    neighbor_cost_origin="origin",
    neighbor_cost_dest="dest",
    neighbor_cost_name="cost",
)

#pick some lat long of some real points
#input files as a function python script
#30.28404486080637, -97.77582045131727 = points of HEB
#three HEB's in the city -> all of the HEB's are the demand
#hospital is the supply
#all 3 hospitals are at 100
#all HEBs 200
#three starbuck's in the city

# Ensure supply and demand are on the same scale
A.demand_df = A.demand_df.to_crs(epsg=4326) #https://spatialreference.org/ref/epsg/4326/
A.supply_df = A.supply_df.to_crs(epsg=4326)
ic(A.demand_df.crs)
ic(A.supply_df.crs)

# Only needed to compare access via euclidean distance and drive times
#A.create_euclidean_distance(threshold=250000, centroid_o=True, centroid_d=True)

# peak at cost matrix
ic(A.cost_df)

# Define weighting functions
gaussian = weights.gaussian(20)
gravity = weights.gravity(scale=60, alpha=-1)

# Run access models
A.weighted_catchment(name="gravity", weight_fn=gravity)
#A.fca_ratio(name="fca", max_cost=25)
A.two_stage_fca(name="2sfca_30min", max_cost=30)
A.enhanced_two_stage_fca(name="e2sfca", weight_fn=gaussian)
A.three_stage_fca(name="3sfca")

ic(A.access_df.columns)
ic(A.access_df[['population', '2sfca_30min_hospital_count']].head())


# Store results from access_df in wide-dataframe format
access_df = A.access_df.reset_index()[[
    "geoid", "population",
    "gravity_hospital_count",
   # "fca_hospital_count",
    "2sfca_30min_hospital_count",
    "e2sfca_hospital_count",
    "3sfca_hospital_count"
]]

# Save to single CSV
access_df.to_csv(os.path.join(output_dir, "access_scores_all_models.csv"), index=False)
print("ðŸŒ¸Saved: access_scores_all_models.csv")


# Normalizes then correlates the model outputs
#correlation_matrix = A.norm_access_df.corr()
#print("Correlation matrix:\n", correlation_matrix)


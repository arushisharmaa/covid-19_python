# -*- coding: utf-8 -*-
"""sample two step.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kb3YYxoqzDPbUjviKDJyamzO8MGUshsS
"""

# Install packages if not already installed
pip install access pandas geopandas matplotlib

# Import libraries
import logging
import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt
from access import Access, weights, Datasets

hospitals_df = gpd.read_file("hospitals_data.geojson")  # Geospatial data for hospitals
population_df = gpd.read_file("population_data.geojson")  # Geospatial data for population per area
travel_times_df = pd.read_csv("travel_times_data.csv")  # Cost matrix

print(population_df.head())
print(hospitals_df.head())
print(travel_times_df.head())

A = Access(
    demand_df=population_df,
    demand_index="geoid",
    demand_value="population",
    supply_df=hospitals_df,
    supply_index="geoid",
    supply_value="hospital_count",
    cost_df=travel_times_df,
    cost_origin="origin",
    cost_dest="dest",
    cost_name="cost",
    #figure out how to do this or what the importance of neighbor is!
    neighbor_cost_df=travel_times_df,
    neighbor_cost_origin="origin",
    neighbor_cost_dest="dest",
    neighbor_cost_name="cost",
)

#pick some lat long of some real points
#input files as a function python script
#30.28404486080637, -97.77582045131727 = points of HEB
#three HEB's in the city -> all of the HEB's are the demand
#hospital is the supply
#all 3 hospitals are at 100
#all HEBs 200
#three starbuck's in the city

print(A.demand_df.crs)
print(A.supply_df.crs)
A.demand_df = A.demand_df.to_crs(epsg=4326) #https://spatialreference.org/ref/epsg/4326/
A.supply_df = A.supply_df.to_crs(epsg=4326)

A.create_euclidean_distance(threshold=250000, centroid_o=True, centroid_d=True)

A.cost_df

gaussian = weights.gaussian(20)
gravity = weights.gravity(scale=60, alpha=-1)

A.weighted_catchment(name="gravity", weight_fn=gravity)
A.fca_ratio(name="fca", max_cost=25)
A.two_stage_fca(name="2sfca_30min", max_cost=30)
A.enhanced_two_stage_fca(name="g2sfca", weight_fn=gaussian)
A.three_stage_fca(name="3sfca")

print("Available columns in access_df:")
print(A.access_df.columns)


print("Weighted Catchment (Gravity):")
print(A.access_df[['population', 'gravity_hospital_count']].head())

print("FCA Ratios:")
print(A.access_df[['population', 'fca_hospital_count']].head())

print("2SFCA Scores:")
print(A.access_df[['population', '2sfca_30min_hospital_count']].head())

print("Enhanced 2SFCA Scores:")
print(A.access_df[['population', 'g2sfca_hospital_count']].head())

print("3SFCA Scores:")
print(A.access_df[['population', '3sfca_hospital_count']].head())


correlation_matrix = A.norm_access_df.corr()
print("Correlation matrix:\n", correlation_matrix)

